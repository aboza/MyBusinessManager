CREATE OR REPLACE PROCEDURE UPDATE_Vendor(
pVendorID IN NUMBER,
pVendorName IN VARCHAR2,
pCompanyName IN VARCHAR2,
pContact IN VARCHAR2,
pPhone IN VARCHAR2,
pAlt_Phone IN VARCHAR2,
pFax IN VARCHAR2,
pEmail IN VARCHAR2,
pVendorType IN VARCHAR2,
pAddress IN VARCHAR2)
IS
BEGIN

SAVEPOINT MY_SAVEPOINT;

BEGIN
  UPDATE BM_VENDORS SET
  name = pVendorName,
  company_name = pCompanyName,
  contact = pcontact,
  phone = pphone,
  alt_phone=palt_phone,
  fax = pfax,
  email = pemail,
  vendor_type = pvendortype,
  address = paddress
  WHERE vendor_id = pVendorID;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK TO MY_SAVEPOINT;
END;
COMMIT;
END;



CREATE OR REPLACE PROCEDURE DELETE_Vendor(pVendorID IN NUMBER)
IS
BEGIN

SAVEPOINT MY_SAVEPOINT;

BEGIN
DELETE BM_VENDORS
WHERE vendor_id = pVendorID;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK TO MY_SAVEPOINT;
END;
COMMIT;
END;

CREATE OR REPLACE PROCEDURE CREATE_Vendor(
pVendorName IN VARCHAR2,
pCompanyName IN VARCHAR2,
pContact IN VARCHAR2,
pPhone IN VARCHAR2,
pAlt_Phone IN VARCHAR2,
pFax IN VARCHAR2,
pEmail IN VARCHAR2,
pVendorType IN VARCHAR2,
pAddress IN VARCHAR2)
IS
BEGIN

SAVEPOINT MY_SAVEPOINT;

BEGIN
  INSERT INTO BM_VENDORS(name,company_name,contact,vendor_type,address,phone,alt_phone,
                        fax,email)
        VALUES(pVendorName,pCompanyName,pContact,pVendorType,pAddress,pPhone,pAlt_Phone,
              pFax,pEmail);
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK TO MY_SAVEPOINT;
END;
COMMIT;
END;

CREATE OR REPLACE PROCEDURE UPDATE_Customer(
pCustomerID IN NUMBER,
pCustomerName IN VARCHAR2,
pCompanyName IN VARCHAR2,
pPhone IN VARCHAR2,
pFax IN VARCHAR2,
pEmail IN VARCHAR2,
pBillTo IN VARCHAR2,
pShipTo IN VARCHAR2,
pTerms IN VARCHAR2)
IS
BEGIN

SAVEPOINT MY_SAVEPOINT;

BEGIN
  UPDATE BM_CUSTOMERS SET
  name = pcustomername,
  company_name = pCompanyName,
  phone = pphone,
  fax = pfax,
  email = pemail,
  bill_to = pbillto,
  ship_to = pshipto,
  terms = pterms
  WHERE customer_id = pcustomerid;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK TO MY_SAVEPOINT;
END;
COMMIT;
END;

CREATE OR REPLACE PROCEDURE DELETE_Customer(pCustomerId IN NUMBER)
IS
BEGIN

SAVEPOINT MY_SAVEPOINT;

BEGIN
DELETE BM_CUSTOMERS
WHERE customer_id = pcustomerid;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK TO MY_SAVEPOINT;
END;
COMMIT;
END;

CREATE OR REPLACE PROCEDURE CREATE_Customer(
pCustomerName IN VARCHAR2,
pCompanyName IN VARCHAR2,
pPhone IN VARCHAR2,
pFax IN VARCHAR2,
pEmail IN VARCHAR2,
pBillTo IN VARCHAR2,
pShipTo IN VARCHAR2,
pTerms IN VARCHAR2)
IS
BEGIN

SAVEPOINT MY_SAVEPOINT;

BEGIN
  INSERT INTO BM_CUSTOMERS(name,company_name,phone,fax,email,bill_to,ship_to,terms)
        VALUES(pCustomerName,pCompanyName,pPhone,pFax,pEmail,pbillto,pshipto,pterms);
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK TO MY_SAVEPOINT;
END;
COMMIT;
END;

CREATE OR REPLACE PROCEDURE DELETE_Role(pRoleId IN NUMBER)
IS
BEGIN

SAVEPOINT MY_SAVEPOINT;

BEGIN

DELETE BM_PERMISSIONSXROLE
WHERE role_id = pRoleId;

DELETE BM_ROLES
WHERE role_id = pRoleId;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK TO MY_SAVEPOINT;
END;
COMMIT;
END;

CREATE OR REPLACE FUNCTION User_Exists(
pUserName IN  VARCHAR2,
pPassword IN VARCHAR2
)
RETURN VARCHAR2
IS 
pass VARCHAR2(250);
strUser_exists VARCHAR2(10);
BEGIN
SELECT enc_dec.encrypt(pPassword) ENCRYPTED INTO pass from dual;

SELECT 'TRUE' INTO strUser_exists 
FROM BM_USERS 
WHERE USERNAME = pUserName AND PASSWORD=pass;
RETURN strUser_exists;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    strUser_exists := 'FALSE';
    
RETURN strUser_exists;
END;

CREATE OR REPLACE PACKAGE enc_dec
AS
   FUNCTION encrypt (p_plainText VARCHAR2) RETURN RAW DETERMINISTIC;
   FUNCTION decrypt (p_encryptedText RAW) RETURN VARCHAR2 DETERMINISTIC;
END;
/

CREATE OR REPLACE PACKAGE BODY enc_dec
AS
     encryption_type    PLS_INTEGER := DBMS_CRYPTO.ENCRYPT_DES
                                     + DBMS_CRYPTO.CHAIN_CBC
                                     + DBMS_CRYPTO.PAD_PKCS5;
     /*
       ENCRYPT_DES is the encryption algorithem. Data Encryption Standard. Block cipher. 
       Uses key length of 56 bits.
       CHAIN_CBC Cipher Block Chaining. Plaintext is XORed with the previous ciphertext 
       block before it is encrypted.
       PAD_PKCS5 Provides padding which complies with the PKCS #5: Password-Based 
       Cryptography Standard
     */
     encryption_key     RAW (32) := UTL_RAW.cast_to_raw('MyEncryptionKey');
     -- The encryption key for DES algorithem, should be 8 bytes or more.

     FUNCTION encrypt (p_plainText VARCHAR2) RETURN RAW DETERMINISTIC
     IS
        encrypted_raw      RAW (2000);
     BEGIN
        encrypted_raw := DBMS_CRYPTO.ENCRYPT
        (
           src => UTL_RAW.CAST_TO_RAW (p_plainText),
           typ => encryption_type,
           key => encryption_key
        );
       RETURN encrypted_raw;
     END encrypt;
     FUNCTION decrypt (p_encryptedText RAW) RETURN VARCHAR2 DETERMINISTIC
     IS
        decrypted_raw      RAW (2000);
     BEGIN
        decrypted_raw := DBMS_CRYPTO.DECRYPT
        (
            src => p_encryptedText,
            typ => encryption_type,
            key => encryption_key
        );
        RETURN (UTL_RAW.CAST_TO_VARCHAR2 (decrypted_raw));
     END decrypt;
END;
/

grant execute on enc_dec to BUSINESSMANAGER_DB;

CREATE OR REPLACE PROCEDURE CREATE_User(
pUserName IN VARCHAR2,
pPassword IN VARCHAR2,
pRole_Id IN NUMBER)
IS
BEGIN
SAVEPOINT MY_SAVEPOINT;
DECLARE pass VARCHAR2(250);
BEGIN
select enc_dec.encrypt(pPassword) encrypted INTO pass from dual;

INSERT INTO BM_USERS(username,password,is_active,role_id)
  VALUES (pUserName,pass,1,pRole_Id);

END;

  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK TO MY_SAVEPOINT;
COMMIT;
END;

CREATE OR REPLACE PROCEDURE UPDATE_User(
pUser_Id IN NUMBER,
pUserName IN VARCHAR2,
pPassword IN VARCHAR2,
pRole_Id IN NUMBER)
IS
BEGIN
SAVEPOINT MY_SAVEPOINT;
DECLARE pass VARCHAR2(250);
BEGIN
select enc_dec.encrypt(pPassword) encrypted INTO pass from dual;

UPDATE BM_USERS
SET
username = pUserName,
password = pass,
role_id = pRole_Id
WHERE user_id = pUser_Id;

END;

  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK TO MY_SAVEPOINT;
COMMIT;
END;

CREATE OR REPLACE PROCEDURE DELETE_User(pUserId IN NUMBER)
IS
BEGIN

SAVEPOINT MY_SAVEPOINT;

BEGIN
DELETE BM_Users
WHERE user_Id = pUserId;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK TO MY_SAVEPOINT;
END;
COMMIT;
END;

create or replace public synonym enc_dec for sys.enc_dec;

CREATE OR REPLACE FUNCTION USER_HAS_PRIVILEGE(
pUserName IN  VARCHAR2,
pAction IN VARCHAR2
)
RETURN VARCHAR2
IS 
has_privilege VARCHAR2(10);
user_Role NUMBER;
BEGIN

SELECT Role_ID INTO user_Role FROM BM_USERS
WHERE USERNAME = pUserName;

SELECT 'TRUE' INTO has_privilege 
FROM BM_PERMISSIONSXROLE PXR
INNER JOIN BM_PERMISSIONS P ON P.PERMISSION_ID = PXR.PERMISSION_ID
WHERE PXR.ROLE_ID = user_Role AND P.CODE =  pAction;

RETURN has_privilege;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    has_privilege := 'FALSE';
    
RETURN has_privilege;
END;

