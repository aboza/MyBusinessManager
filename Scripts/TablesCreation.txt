CREATE TABLE BM_ROLES 
(
  ROLE_ID NUMBER GENERATED ALWAYS AS IDENTITY NOT NULL 
, NAME VARCHAR2(150) NOT NULL 
, CONSTRAINT ROLES_PK PRIMARY KEY 
  (
    ROLE_ID 
  )
  ENABLE 
);

CREATE TABLE BM_USERS 
(
  USER_ID NUMBER GENERATED ALWAYS AS IDENTITY NOT NULL 
, USERNAME VARCHAR2(150) NOT NULL 
, PASSWORD BLOB NOT NULL 
, IS_ACTIVE NUMBER(1, 0) DEFAULT 1 NOT NULL
, Role_ID NUMBER NOT NULL
, CONSTRAINT BM_USERS_PK PRIMARY KEY (USER_ID) ENABLE
, CONSTRAINT FK_BM_USERS_ROLE_ID FOREIGN KEY (Role_ID) REFERENCES BM_ROLES(Role_ID)
);

CREATE TABLE BM_PERMISSIONS 
(
  PERMISSION_ID NUMBER GENERATED ALWAYS AS IDENTITY NOT NULL 
, CODE VARCHAR2(100) NOT NULL 
, DESCRIPTION VARCHAR2(250) 
, CONSTRAINT BM_PERMISSIONS_PK PRIMARY KEY 
  (
    PERMISSION_ID 
  )
  ENABLE 
);

CREATE TABLE BM_PERMISSIONSXROLE 
(
  PERMISSIONXROLE_ID NUMBER GENERATED ALWAYS AS IDENTITY NOT NULL 
, ROLE_ID NUMBER NOT NULL 
, PERMISSION_ID NUMBER NOT NULL 
, CONSTRAINT BM_PERMISSIONSXROLE_PK PRIMARY KEY 
  (
    PERMISSIONXROLE_ID 
  )
  ENABLE 
);

ALTER TABLE BM_PERMISSIONSXROLE
ADD CONSTRAINT FK_BM_PERMISSIONSXROLE_PERM_ID FOREIGN KEY
(
  PERMISSION_ID 
)
REFERENCES BM_PERMISSIONS
(
  PERMISSION_ID 
)
ENABLE;

ALTER TABLE BM_PERMISSIONSXROLE
ADD CONSTRAINT FK_BM_PERMISSIONSXROLE_ROLE_ID FOREIGN KEY
(
  ROLE_ID 
)
REFERENCES BM_ROLES
(
  ROLE_ID 
)
ENABLE;

CREATE TABLE BM_ITEMS 
(
  ITEM_ID NUMBER GENERATED ALWAYS AS IDENTITY NOT NULL 
, NAME VARCHAR2(150) NOT NULL 
, CODE VARCHAR2(150) NOT NULL 
, DESCRIPTION VARCHAR2(250) 
, COST_PER_UNIT NUMBER DEFAULT 0 NOT NULL 
, REORDER_POINT NUMBER DEFAULT 0 NOT NULL 
, ON_HAND NUMBER DEFAULT 0 NOT NULL
, CONSTRAINT BM_ITEMS_PK PRIMARY KEY 
  (
    ITEM_ID 
  )
  ENABLE 
);

CREATE TABLE BM_WAREHOUSES 
(
  WAREHOUSE_ID NUMBER GENERATED ALWAYS AS IDENTITY NOT NULL 
, NAME VARCHAR2(150) NOT NULL 
, ADDRESS VARCHAR2(250) 
, CONSTRAINT BM_WAREHOUSES_PK PRIMARY KEY 
  (
    WAREHOUSE_ID 
  )
  ENABLE 
);

CREATE TABLE BM_INVENTORY 
(
  INVENTORY_ID NUMBER GENERATED ALWAYS AS IDENTITY NOT NULL 
, ITEM_ID NUMBER NOT NULL
, WAREHOUSE_ID NUMBER NOT NULL
, ON_HAND NUMBER DEFAULT 0 NOT NULL
, CONSTRAINT BM_INVENTORY_PK PRIMARY KEY 
  (
    INVENTORY_ID 
  )
  ENABLE 
);

ALTER TABLE BM_INVENTORY
ADD CONSTRAINT FK_BM_INVENTORY_ITEM_ID FOREIGN KEY
(
  ITEM_ID 
)
REFERENCES BM_ITEMS
(
  ITEM_ID 
)
ENABLE;

ALTER TABLE BM_INVENTORY
ADD CONSTRAINT FK_BM_INVENTORY_WAREHOUSE_ID FOREIGN KEY
(
  WAREHOUSE_ID 
)
REFERENCES BM_WAREHOUSES
(
  WAREHOUSE_ID 
)
ENABLE;

CREATE TABLE BM_CASHIERS 
(
  CASHIER_ID NUMBER GENERATED ALWAYS AS IDENTITY NOT NULL 
, NAME VARCHAR2(100) NOT NULL 
, CONSTRAINT BM_CASHIERS_PK PRIMARY KEY 
  (
    CASHIER_ID 
  )
  ENABLE 
);

CREATE TABLE BM_CUSTOMERS 
(
  CUSTOMER_ID NUMBER GENERATED ALWAYS AS IDENTITY NOT NULL 
, NAME VARCHAR2(150) NOT NULL 
, COMPANY_NAME VARCHAR2(150) 
, PHONE VARCHAR2(15) 
, FAX VARCHAR2(15) 
, EMAIL VARCHAR2(50) 
, BILL_TO VARCHAR2(250) 
, SHITP_TO VARCHAR2(250) 
, TERMS VARCHAR2(50) 
, CONSTRAINT BM_CUSTOMERS_PK PRIMARY KEY 
  (
    CUSTOMER_ID 
  )
  ENABLE 
);

CREATE TABLE BM_RECEIPTS 
(
  RECEIPT_ID NUMBER GENERATED ALWAYS AS IDENTITY NOT NULL 
, CUSTOMER_ID NUMBER NOT NULL 
, RECEIPT_DATE DATE NOT NULL 
, RECEIPT_NUMBER NUMBER NOT NULL 
, PAYMENT_METHOD VARCHAR2(150) NOT NULL 
, OBSERVATIONS VARCHAR2(250) 
, DISCOUNT NUMBER DEFAULT 0 NOT NULL
, TAX NUMBER DEFAULT 0 NOT NULL
, TOTAL NUMBER DEFAULT 0 NOT NULL 
, SUBTOTAL NUMBER DEFAULT 0 NOT NULL 
, POSTED NUMBER(1, 0) DEFAULT 0 NOT NULL
, VOID NUMBER(1, 0) DEFAULT 0 NOT NULL 
, CONSTRAINT BM_RECEIPTS_PK PRIMARY KEY 
  (
    RECEIPT_ID 
  )
  ENABLE 
);

ALTER TABLE BM_RECEIPTS
ADD CONSTRAINT FK_BM_RECEIPTS_CUSTOMER_ID FOREIGN KEY
(
  CUSTOMER_ID 
)
REFERENCES BM_CUSTOMERS
(
  CUSTOMER_ID 
)
ENABLE;

CREATE TABLE BM_RECEIPT_DETAILS 
(
  RECEIPT_DETAIL_ID NUMBER GENERATED ALWAYS AS IDENTITY NOT NULL 
, ITEM_ID NUMBER NOT NULL 
, RECEIPT_ID NUMBER NOT NULL
, QUANTITY NUMBER DEFAULT 0 NOT NULL 
, TAX NUMBER DEFAULT 0 NOT NULL 
, COST NUMBER DEFAULT 0 NOT NULL 
, TOTAL_AMOUNT NUMBER DEFAULT 0 NOT NULL 
, DISCOUNT NUMBER DEFAULT 0 NOT NULL 
, CONSTRAINT BM_RECEIPT_DETAILS_PK PRIMARY KEY 
  (
    RECEIPT_DETAIL_ID 
  )
  ENABLE 
);

ALTER TABLE BM_RECEIPT_DETAILS
ADD CONSTRAINT FK_BM_RECEIPT_DETAILS_RECP_ID FOREIGN KEY
(
  RECEIPT_ID 
)
REFERENCES BM_RECEIPTS
(
  RECEIPT_ID 
)
ENABLE;

ALTER TABLE BM_RECEIPT_DETAILS
ADD CONSTRAINT FK_BM_RECEIPT_DETAILS_ITEM_ID FOREIGN KEY
(
  ITEM_ID 
)
REFERENCES BM_ITEMS
(
  ITEM_ID 
)
ENABLE;

CREATE TABLE BM_VENDORS 
(
  VENDOR_ID NUMBER GENERATED ALWAYS AS IDENTITY NOT NULL 
, NAME VARCHAR2(150) NOT NULL 
, COMPANY_NAME VARCHAR2(150) NOT NULL 
, CONTACT VARCHAR2(150) 
, VENDOR_TYPE VARCHAR2(100) NOT NULL 
, ADDRESS VARCHAR2(250) 
, PHONE VARCHAR2(15) 
, ALT_PHONE VARCHAR2(15) 
, FAX VARCHAR2(15) 
, EMAIL VARCHAR2(50) 
, CONSTRAINT BM_VENDORS_PK PRIMARY KEY 
  (
    VENDOR_ID 
  )
  ENABLE 
);

CREATE TABLE BM_VENDORXITEM 
(
  VENDORXITEM_ID NUMBER GENERATED ALWAYS AS IDENTITY NOT NULL
, VENDOR_ID NUMBER NOT NULL 
, ITEM_ID NUMBER NOT NULL 
, CONSTRAINT BM_VENDORXITEM_PK PRIMARY KEY 
  (
    VENDORXITEM_ID 
  )
  ENABLE 
);

ALTER TABLE BM_VENDORXITEM
ADD CONSTRAINT FK_BM_VENDORXITEM_ITEM_ID FOREIGN KEY
(
  ITEM_ID 
)
REFERENCES BM_ITEMS
(
  ITEM_ID 
)
ENABLE;

ALTER TABLE BM_VENDORXITEM
ADD CONSTRAINT FK_BM_VENDORXITEM_VENDOR_ID FOREIGN KEY
(
  VENDOR_ID 
)
REFERENCES BM_VENDORS
(
  VENDOR_ID 
)
ENABLE;

CREATE TABLE BM_PURCHASE_ORDERS 
(
  PURCHASE_ORDER_ID NUMBER GENERATED ALWAYS AS IDENTITY NOT NULL 
, VENDOR_ID  NUMBER NOT NULL 
, PURCHASE_ORDER_DATE DATE NOT NULL 
, PURCHASE_ORDER_NUMBER NUMBER NOT NULL 
, PAYMENT_METHOD VARCHAR2(150) NOT NULL 
, OBSERVATIONS VARCHAR2(250) 
, DISCOUNT NUMBER DEFAULT 0 NOT NULL
, TAX NUMBER DEFAULT 0 NOT NULL
, TOTAL NUMBER DEFAULT 0 NOT NULL 
, SUBTOTAL NUMBER DEFAULT 0 NOT NULL 
, POSTED NUMBER(1, 0) DEFAULT 0 NOT NULL
, VOID NUMBER(1, 0) DEFAULT 0 NOT NULL 
, CONSTRAINT BM_PURCHASE_ORDERS_PK PRIMARY KEY 
  (
    PURCHASE_ORDER_ID 
  )
  ENABLE 
);

ALTER TABLE BM_PURCHASE_ORDERS
ADD CONSTRAINT FK_BM_PO_VENDOR_ID FOREIGN KEY
(
  VENDOR_ID 
)
REFERENCES BM_VENDORS
(
  VENDOR_ID 
)
ENABLE;

CREATE TABLE BM_PURCHASE_ORDER_DETAILS 
(
  PURCHASE_ORDER_DETAIL_ID NUMBER GENERATED ALWAYS AS IDENTITY NOT NULL 
, ITEM_ID NUMBER NOT NULL 
, PURCHASE_ORDER_ID NUMBER NOT NULL
, QUANTITY NUMBER DEFAULT 0 NOT NULL 
, TAX NUMBER DEFAULT 0 NOT NULL 
, COST NUMBER DEFAULT 0 NOT NULL 
, TOTAL_AMOUNT NUMBER DEFAULT 0 NOT NULL 
, DISCOUNT NUMBER DEFAULT 0 NOT NULL 
, CONSTRAINT BM_PO_DETAILS_DETAILS_PK PRIMARY KEY 
  (
    PURCHASE_ORDER_ID 
  )
  ENABLE 
);

ALTER TABLE BM_PURCHASE_ORDER_DETAILS
ADD CONSTRAINT FK_BM_PO_DETAILS_PO_ID FOREIGN KEY
(
  PURCHASE_ORDER_ID 
)
REFERENCES BM_PURCHASE_ORDERS
(
  PURCHASE_ORDER_ID 
)
ENABLE;

ALTER TABLE BM_PURCHASE_ORDER_DETAILS
ADD CONSTRAINT FK_BM_PO_DETAILS_ITEM_ID FOREIGN KEY
(
  ITEM_ID 
)
REFERENCES BM_ITEMS
(
  ITEM_ID 
)
ENABLE;

CREATE UNIQUE INDEX IX_BM_PERMISSIONS_CODE ON BM_PERMISSIONS (CODE);
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanCreateRoles','Usuario puede crear Roles');
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanEditRoles','Usuario puede editar Roles');
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanCreateUsers','Usuario puede crear Usuarios');
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanEditUsers','Usuario puede editar Usuarios');
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanAccessInventory','Usuario posee acceso al modulo de Inventario');
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanAccessBilling','Usuario posee acceso al modulo de Facturaci√≥n');
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanAccessReports','Usuario posee acceso al modulo de Reportes');
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanPostReceipts','Usuario puede aplicar Recibos');
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanVoidReceipts','Usuario puede anular Recibos');
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanPostPurchaseOrders','Usuario puede aplicar Ordenes de Compra');
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanVoidPurchaseOrders','Usuario puede anular Ordenes de Compra');
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanAddItems','Usuario puede agregar nuevos Productos');
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanEditItems','Usuario puede editar Productos');
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanCreateCustomers','Usuario puede crear Clientes');
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanEditCustomers','Usuario puede editar Clientes');
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanCreateVendors','Usuario puede crear Proveedores');
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanEditVendors','Usuario puede editar Proveedores');
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanCreateWareHouses','Usuario puede crear Bodegas');
INSERT INTO BM_PERMISSIONS (CODE,DESCRIPTION) VALUES ('actCanEditWareHouses','Usuario puede editar Bodegas');








